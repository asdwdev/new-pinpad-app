@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Monitoring";
}

<div class="p-4 md:p-6">
    <!-- Breadcrumb -->
    <div class="mb-6 text-sm">
        <a href="#" class="text-teal-500 font-semibold hover:text-teal-600 transition-colors">Pinpad List</a> /
        <span class="text-gray-500">Monitoring</span>
    </div>

    <!-- Filter Form -->
    <div class="bg-white p-6 rounded-lg shadow-lg border border-gray-200 mb-6">
        <h3 class="text-lg font-semibold text-gray-800 mb-6">Search & Filter</h3>

        <!-- Two Column Layout -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Left Column -->
            <div class="space-y-4">
                <!-- Regional -->
                <div>
                    <label class="block text-gray-700 text-sm font-medium mb-2">Regional:</label>
                    <select id="regionalSelect"
                        class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-all">
                        <option value="">--Select Regional--</option>
                    </select>
                </div>

                <!-- Cabang Induk -->
                <div>
                    <label class="block text-gray-700 text-sm font-medium mb-2">Cabang Induk:</label>
                    <select id="cabangIndukSelect"
                        class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-all">
                        <option value="">--Select Cabang Induk--</option>
                    </select>
                </div>

                <!-- Outlet -->
                <div>
                    <label class="block text-gray-700 text-sm font-medium mb-2">Outlet:</label>
                    <select id="outletSelect"
                        class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-all">
                        <option value="">--Select Outlet--</option>
                    </select>
                </div>
            </div>

            <!-- Right Column -->
            <div class="space-y-4">
                <!-- Serial Number -->
                <div>
                    <label class="block text-gray-700 text-sm font-medium mb-2">Serial Number:</label>
                    <input type="text" id="serialNumberFilter" placeholder="Please enter your Serial Number"
                        class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-all">
                </div>

                <!-- Username -->
                <div>
                    <label class="block text-gray-700 text-sm font-medium mb-2">Username:</label>
                    <input type="text" id="usernameFilter" placeholder="Please enter your Username"
                        class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-all">
                </div>

                <!-- Status -->
                <div>
                    <label class="block text-gray-700 text-sm font-medium mb-2">Status:</label>
                    <select id="statusFilter"
                        class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-all">
                        <option value="">--Select Status Pinpad--</option>
                        <option value="Active">Active</option>
                        <option value="Inactive">InActive</option>
                        <option value="NotReadyToUse">Not Ready To Use</option>
                        <option value="ReadyToUse">Ready To Use</option>
                        <option value="Maintenance">Maintenance</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex justify-end space-x-4 gap-2 mt-8">
            <button id="resetBtn"
                style="background-color: #6b7280; color: white; padding: 12px 24px; border-radius: 8px; font-weight: 600; font-size: 14px; border: none; cursor: pointer; transition: all 0.2s; box-shadow: 0 2px 4px rgba(0,0,0,0.1);"
                onmouseover="this.style.backgroundColor='#4b5563'; this.style.boxShadow='0 4px 8px rgba(0,0,0,0.15)'"
                onmouseout="this.style.backgroundColor='#6b7280'; this.style.boxShadow='0 2px 4px rgba(0,0,0,0.1)'">
                <i class="fa fa-refresh mr-2"></i>Reset
            </button>
            <button id="searchBtn"
                style="background-color: #14b8a6; color: white; padding: 16px 32px; border-radius: 8px; font-weight: 600; font-size: 14px; border: none; cursor: pointer; transition: all 0.2s; box-shadow: 0 2px 4px rgba(0,0,0,0.1);"
                onmouseover="this.style.backgroundColor='#0d9488'; this.style.boxShadow='0 4px 8px rgba(0,0,0,0.15)'"
                onmouseout="this.style.backgroundColor='#14b8a6'; this.style.boxShadow='0 2px 4px rgba(0,0,0,0.1)'">
                <i class="fa fa-search mr-2"></i>Search
            </button>
        </div>
    </div>

    <!-- Export Buttons (Hidden by default) -->
    <div id="exportSection" class="hidden mb-6">
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h4 class="text-sm font-semibold text-blue-800 mb-3">Export Data</h4>
            <div class="flex flex-wrap gap-3">
                <!-- Export PDF (merah) -->
                <button id="exportPdf"
                    style="background-color: #ef4444; color: white; padding: 8px 20px; border-radius: 8px; font-weight: 600; font-size: 14px; border: none; cursor: pointer; transition: all 0.2s;"
                    onmouseover="this.style.backgroundColor='#dc2626'"
                    onmouseout="this.style.backgroundColor='#ef4444'">
                    PDF
                </button>



                <!-- Export XLSX (biru) -->
                <button id="exportXlsx"
                    style="background-color:rgb(31, 199, 39); color: white; padding: 8px 20px; border-radius: 8px; font-weight: 600; font-size: 14px; border: none; cursor: pointer; transition: all 0.2s;"
                    onmouseover="this.style.backgroundColor='#2563eb'"
                    onmouseout="this.style.backgroundColor='#3b82f6'">
                    XLSX
                </button>

                <button id="exportCsv"
                    style="background-color:rgb(101, 101, 101); color: white; padding: 8px 20px; border-radius: 8px; font-weight: 600; font-size: 14px; border: none; cursor: pointer; transition: all 0.2s;"
                    onmouseover="this.style.backgroundColor='#10b981'"
                    onmouseout="this.style.backgroundColor='#10b981'">
                    CSV
                </button>
            </div>
        </div>
    </div>

    <!-- Loading Overlay for Export -->
    <div id="exportLoading" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 max-w-sm mx-4">
            <div class="flex items-center space-x-3">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                <div>
                    <p class="text-gray-800 font-medium">Exporting...</p>
                    <p class="text-gray-600 text-sm">Please wait while we prepare your file</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Table Container -->
    <div class="bg-white shadow-lg rounded-lg border border-gray-200 overflow-hidden">
        <!-- Table Header with Search -->
        <div class="px-6 py-4 border-b border-gray-200 bg-gray-50">
            <div class="flex flex-col md:flex-row justify-between items-center gap-4">
                <div class="flex items-center mt-2 md:mt-0">
                    <label class="text-sm text-gray-700 mr-3">Show:</label>
                    <select id="pageSizeSelect"
                        class="border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-blue-400 text-sm">
                        <option value="10">10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                    </select>
                    <span class="text-sm text-gray-700 ml-2">entries</span>
                </div>
                <!-- Search Box -->
                <div class="flex items-center gap-2">
                    <label class="text-sm font-medium text-gray-700">Search:</label>
                    <input type="text" id="searchInput" placeholder="Search in all columns..."
                        class="border border-gray-300 rounded px-3 py-2 text-sm focus:ring-2 focus:ring-teal-500 focus:border-transparent min-w-[250px]">
                </div>
            </div>
        </div>

        <!-- Table Responsive Wrapper -->
        <div class="overflow-x-auto">
            <table id="pinpadListTable" class="min-w-full text-left border-collapse">
                <thead>
                    <tr class="bg-gray-100 text-gray-700 text-sm">
                        <th
                            class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200">
                            <div class="flex items-center justify-between">
                                <span>Regional</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th
                            class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200">
                            <div class="flex items-center justify-between">
                                <span>Cabang Induk</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th
                            class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200">
                            <div class="flex items-center justify-between">
                                <span>Kode Outlet</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th
                            class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200">
                            <div class="flex items-center justify-between">
                                <span>Location</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th
                            class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200">
                            <div class="flex items-center justify-between">
                                <span>Register</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th
                            class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200">
                            <div class="flex items-center justify-between">
                                <span>Update Date</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th
                            class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200">
                            <div class="flex items-center justify-between">
                                <span>Serial Number</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th
                            class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200">
                            <div class="flex items-center justify-between">
                                <span>TID</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th
                            class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200">
                            <div class="flex items-center justify-between">
                                <span>Status Pinpad</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th
                            class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200">
                            <div class="flex items-center justify-between">
                                <span>Create By</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th
                            class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200">
                            <div class="flex items-center justify-between">
                                <span>IP Low</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th
                            class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200">
                            <div class="flex items-center justify-between">
                                <span>IP High</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th
                            class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200">
                            <div class="flex items-center justify-between">
                                <span>Last Activity</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                    </tr>
                </thead>
                <tbody id="tableBody" class="text-sm">
                    <!-- Data will be populated here -->
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="px-6 py-4 border-t border-gray-200 bg-gray-50">
            <div class="flex flex-col md:flex-row justify-between items-center gap-4">

                <div class="text-sm text-gray-600" id="tableInfo">
                    Showing 0 to 0 of 0 entries
                </div>
                <div class="flex items-center space-x-2" id="paginationButtons">
                    <button id="prevBtn"
                        class="px-3 py-2 border border-gray-300 rounded hover:bg-gray-100 text-sm transition-colors disabled:opacity-50 disabled:cursor-not-allowed bg-white"
                        disabled>
                        Previous
                    </button>
                    <span id="pageNumbers" class="flex space-x-1"></span>
                    <button id="nextBtn"
                        class="px-3 py-2 border border-gray-300 rounded hover:bg-gray-100 text-sm transition-colors disabled:opacity-50 disabled:cursor-not-allowed bg-white"
                        disabled>
                        Next
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>



@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            let allPinpads = [];
            let currentPage = 1;
            let rowsPerPage = 10; // Changed from const to let so it can be updated
            let currentFilters = {};
            let currentSort = { column: null, direction: 'asc' };

            loadRegional();
            loadCabangInduk();
            // Don't load pinpads initially - wait for search

            // Ensure sorting indicators are working
            setTimeout(() => {
                ensureSortingIndicators();
            }, 100);

            // Ensure pagination section exists
            setTimeout(() => {
                ensurePaginationSectionExists();
            }, 200);

            // Show initial message
            $('#tableBody').html(`
                                                                                        <tr>
                                                                                            <td colspan="13" class="text-center py-12 text-gray-500">
                                                                                                <div class="flex flex-col items-center space-y-3">
                                                                                                    <p class="text-xl font-medium text-gray-600">No data to display</p>
                                                                                                    <p class="text-sm text-gray-500">Please use the search form above to filter and view data</p>
                                                                                                </div>
                                                                                            </td>
                                                                                        </tr>
                                                                                    `);

            // Update pagination info
            $('#tableInfo').text('Showing 0 to 0 of 0 entries');

            // Hide export section initially
            $('#exportSection').addClass('hidden');

            // Ensure pagination section is visible but disabled
            $('#paginationButtons').show();
            $('#prevBtn').prop('disabled', true).show();
            $('#nextBtn').prop('disabled', true).show();
            $('#pageNumbers').show();

            // Initialize page size selector
            updatePageSizeSelector();

            // Search button event listener
            $('#searchBtn').on('click', function () {
                performSearch();
            });

            // Reset button event listener
            $('#resetBtn').on('click', function () {
                // Clear all filter values
                $('#regionalSelect').val('');
                $('#cabangIndukSelect').val('');
                $('#outletSelect').val('');
                $('#serialNumberFilter').val('');
                $('#usernameFilter').val('');
                $('#statusFilter').val('');
                $('#searchInput').val('');

                // Clear current filters and sorting
                currentFilters = {};
                currentSort = { column: null, direction: 'asc' };

                // Reset sort indicators
                $('.sort-indicator i').removeClass('fa-sort-up fa-sort-down text-blue-500').addClass('fa-sort text-gray-400');

                // Hide export section
                $('#exportSection').addClass('hidden');

                // Show initial message
                $('#tableBody').html(`
                                                                                            <tr>
                                                                                                <td colspan="13" class="text-center py-12 text-gray-500">
                                                                                                    <div class="flex flex-col items-center space-y-3">
                                                                                                        <p class="text-xl font-medium text-gray-600">No data to display</p>
                                                                                                        <p class="text-sm text-gray-500">Please use the search form above to filter and view data</p>
                                                                                                    </div>
                                                                                                </td>
                                                                                            </tr>
                                                                                        `);

                // Update pagination info
                $('#tableInfo').text('Showing 0 to 0 of 0 entries');

                // Clear pagination buttons
                $('#paginationButtons').empty();

                // Reset page size to default
                rowsPerPage = 10;
                updatePageSizeSelector();
            });

            // Export button event listeners
            $('#exportPdf').on('click', function () {
                exportData('pdf');
            });

            $('#exportCsv').on('click', function () {
                exportData('csv');
            });

            $('#exportXlsx').on('click', function () {
                exportData('xlsx');
            });

            // Page size selector event listener
            $('#pageSizeSelect').on('change', function () {
                const newPageSize = parseInt($(this).val());

                // Update rowsPerPage
                rowsPerPage = newPageSize;

                // Reset to first page when page size changes
                currentPage = 1;

                // Re-render table with new page size
                renderTable();
            });

            // Table header click events for sorting
            $(document).on('click', 'th', function () {
                const column = $(this).find('span').text().toLowerCase().replace(/\s+/g, '');
                handleSort(column);
            });

            // Pagination event handlers using event delegation
            $(document).on('click', '#prevBtn', function () {
                if (currentPage > 1) {
                    currentPage--;
                    renderTable();
                }
            });

            $(document).on('click', '#nextBtn', function () {
                const totalPages = Math.ceil(allPinpads.length / rowsPerPage);
                if (currentPage < totalPages) {
                    currentPage++;
                    renderTable();
                }
            });

            $(document).on('click', '#pageNumbers button', function () {
                const page = parseInt($(this).attr('data-page'));
                if (page && page !== currentPage) {
                    currentPage = page;
                    renderTable();
                }
            });

            // Search input event listener for table search
            $('#searchInput').on('input', function () {
                const searchTerm = $(this).val().toLowerCase();

                if (searchTerm === '') {
                    // If search is empty, show all data
                    renderTable();
                } else {
                    // Filter data based on search term
                    const filteredData = allPinpads.filter(item => {
                        return Object.values(item).some(value =>
                            value && value.toString().toLowerCase().includes(searchTerm)
                        );
                    });

                    // Update table with filtered data
                    renderTableWithData(filteredData);
                }
            });

            // Function to render table with specific data
            function renderTableWithData(dataToRender) {
                // Sort data first
                const sortedData = sortData([...dataToRender]);

                const start = (currentPage - 1) * rowsPerPage;
                const end = start + rowsPerPage;
                const pageData = sortedData.slice(start, end);

                $('#tableBody').empty();
                if (pageData.length === 0) {
                    $('#tableBody').append(`
                                                                                                <tr>
                                                                                                    <td colspan="13" class="text-center py-8 text-gray-500">
                                                                                                        <div class="flex flex-col items-center space-y-2">
                                                                                                            <p class="text-sm font-medium text-gray-600">No data found</p>
                                                                                                            <p class="text-xs text-gray-500">Try adjusting your search term</p>
                                                                                                        </div>
                                                                                                    </td>
                                                                                                </tr>
                                                                                            `);
                } else {
                    pageData.forEach((item, index) => {
                        const row = `
                                                                                                    <tr class="border-b border-gray-100 hover:bg-gray-50 transition-colors">
                                                                                                        <td class="px-4 py-3 text-gray-900">${item.regional || '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900">${item.cabangInduk || '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900 font-mono">${item.kodeOutlet || '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900">${item.location || '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900">${item.registerDate ? formatDate(item.registerDate) : '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900">${item.updateDate ? formatDate(item.updateDate) : '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900 font-mono">${item.serialNumber || '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900">${item.tid || '-'}</td>
                                                                                                        <td class="px-4 py-3">
                                                                                                            <span class="inline-block px-2 py-1 text-xs font-medium rounded-full ${getStatusClass(item.statusPinpad)}">
                                                                                                                ${item.statusPinpad || '-'}
                                                                                                            </span>
                                                                                                        </td>
                                                                                                        <td class="px-4 py-3 text-gray-900">${item.createBy || '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900 font-mono">${item.ipLow || '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900 font-mono">${item.ipHigh || '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900">${item.lastActivity ? formatDate(item.lastActivity) : '-'}</td>
                                                                                                    </tr>
                                                                                                `;
                        $('#tableBody').append(row);
                    });
                }

                // Render pagination for filtered data
                renderPaginationWithData(dataToRender);
                updatePaginationInfoWithData(dataToRender);
            }

            // Pagination event handlers using event delegation for filtered data
            function renderPaginationWithData(dataToRender) {
                const totalPages = Math.ceil(dataToRender.length / rowsPerPage);

                const $pageNumbers = $('#pageNumbers').empty();

                if (totalPages <= 1) {
                    $('#prevBtn').prop('disabled', true);
                    $('#nextBtn').prop('disabled', true);
                    return;
                }

                // Previous button
                $('#prevBtn').prop('disabled', currentPage === 1);

                // Page numbers
                for (let i = 1; i <= totalPages; i++) {
                    const btn = $('<button>')
                        .text(i)
                        .addClass('px-3 py-1 border rounded text-sm transition-colors')
                        .toggleClass('bg-blue-500 text-white border-blue-500', i === currentPage)
                        .toggleClass('hover:bg-gray-100', i !== currentPage)
                        .attr('data-page', i);

                    $pageNumbers.append(btn);
                }

                // Next button
                $('#nextBtn').prop('disabled', currentPage === totalPages);
            }

            function updatePaginationInfoWithData(dataToRender) {
                const totalRows = dataToRender.length;
                const start = totalRows === 0 ? 0 : (currentPage - 1) * rowsPerPage + 1;
                const end = Math.min(currentPage * rowsPerPage, totalRows);
                $('#tableInfo').text(`Showing ${start} to ${end} of ${totalRows} entries`);

                // Also update debug info
                // updateDebugInfo(); // Removed
            }


            // Search function
            function performSearch() {
                const filters = {
                    regional: $('#regionalSelect').val(),
                    cabangInduk: $('#cabangIndukSelect').val(),
                    outlet: $('#outletSelect').val(),
                    serialNumber: $('#serialNumberFilter').val(),
                    username: $('#usernameFilter').val(),
                    status: $('#statusFilter').val()
                };

                // Check if any filter is applied
                const hasFilters = Object.values(filters).some(value => value && value.trim() !== '');

                if (!hasFilters) {
                    alert('Please select at least one filter criteria before searching.');
                    return;
                }

                // Store current filters
                currentFilters = filters;

                // Build proper filter parameters for API
                const apiFilters = {};
                if (filters.regional) apiFilters.loc = filters.regional;
                if (filters.cabangInduk) apiFilters.cabangInduk = filters.cabangInduk;
                if (filters.outlet) apiFilters.outlet = filters.outlet;
                if (filters.serialNumber) apiFilters.serialNumber = filters.serialNumber;
                if (filters.username) apiFilters.username = filters.username;
                if (filters.status) apiFilters.status = filters.status;

                // Apply filters and search
                loadPinpads(apiFilters);

                // Show export section after successful search
                $('#exportSection').removeClass('hidden');
            }

            // Sort function
            function handleSort(column) {
                // Map display names to actual data properties
                const columnMap = {
                    'regional': 'regional',
                    'cabanginduk': 'cabangInduk',
                    'kodeoutlet': 'kodeOutlet',
                    'location': 'location',
                    'register': 'registerDate',
                    'updatedate': 'updateDate',
                    'serialnumber': 'serialNumber',
                    'tid': 'tid',
                    'status': 'statusPinpad',
                    'createby': 'createBy',
                    'iplow': 'ipLow',
                    'iphigh': 'ipHigh',
                    'lastactivity': 'lastActivity'
                };

                const actualColumn = columnMap[column];

                if (!actualColumn) {
                    return;
                }

                if (currentSort.column === actualColumn) {
                    // Toggle direction if same column
                    currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                } else {
                    // New column, set to ascending
                    currentSort.column = actualColumn;
                    currentSort.direction = 'asc';
                }

                // Update sort indicators
                $('.sort-indicator i').removeClass('fa-sort-up fa-sort-down text-blue-500').addClass('fa-sort text-gray-400');

                // Find the clicked header and update its icon
                const clickedHeader = $(`th:has(span:contains("${column.charAt(0).toUpperCase() + column.slice(1).replace(/([A-Z])/g, ' $1')}"))`);
                const icon = clickedHeader.find('.sort-indicator i');

                if (currentSort.direction === 'asc') {
                    icon.removeClass('fa-sort fa-sort-down text-gray-400').addClass('fa-sort-up text-blue-500');
                } else {
                    icon.removeClass('fa-sort fa-sort-up text-gray-400').addClass('fa-sort-down text-blue-500');
                }

                // Reset to first page and re-render
                currentPage = 1;
                renderTable();
            }

            // Sort data function
            function sortData(data) {
                if (!currentSort.column) {
                    return data;
                }

                const sortedData = data.sort((a, b) => {
                    let aVal = a[currentSort.column];
                    let bVal = b[currentSort.column];

                    // Handle null/undefined values
                    if (aVal === null || aVal === undefined) aVal = '';
                    if (bVal === null || bVal === undefined) bVal = '';

                    // Handle date sorting
                    if (currentSort.column.includes('Date') || currentSort.column.includes('Activity')) {
                        aVal = new Date(aVal || 0);
                        bVal = new Date(bVal || 0);
                    }

                    // Handle numeric sorting for TID and IP addresses
                    if (currentSort.column === 'tid' || currentSort.column.includes('ip')) {
                        // Extract numbers from IP addresses or TID
                        aVal = parseFloat(aVal.toString().replace(/[^\d.]/g, '')) || 0;
                        bVal = parseFloat(bVal.toString().replace(/[^\d.]/g, '')) || 0;
                    }

                    // Handle numeric sorting for Serial Number
                    if (currentSort.column === 'serialNumber') {
                        // Extract numbers from Serial Number (e.g., "SN000001" -> 1)
                        aVal = parseInt(aVal.toString().replace(/\D/g, '')) || 0;
                        bVal = parseInt(bVal.toString().replace(/\D/g, '')) || 0;
                    }

                    // Handle numeric sorting for Kode Outlet
                    if (currentSort.column === 'kodeOutlet') {
                        // Extract numbers from Kode Outlet (e.g., "OUT001" -> 1)
                        aVal = parseInt(aVal.toString().replace(/\D/g, '')) || 0;
                        bVal = parseInt(bVal.toString().replace(/\D/g, '')) || 0;
                    }

                    // String comparison
                    if (typeof aVal === 'string') {
                        aVal = aVal.toLowerCase();
                        bVal = bVal.toLowerCase();
                    }

                    let result = 0;
                    if (aVal < bVal) result = currentSort.direction === 'asc' ? -1 : 1;
                    else if (aVal > bVal) result = currentSort.direction === 'asc' ? 1 : -1;

                    return result;
                });

                return sortedData;
            }

            // Export function
            function exportData(format) {
                // Show loading overlay
                $('#exportLoading').removeClass('hidden');

                // Build query string for filters
                const queryParams = new URLSearchParams();
                queryParams.append('format', format);

                // Add filters to query params
                Object.keys(currentFilters).forEach(key => {
                    if (currentFilters[key] && currentFilters[key].trim() !== '') {
                        queryParams.append(key, currentFilters[key]);
                    }
                });

                // Make API call to export using jQuery
                const exportUrl = `http://localhost:5125/api/Pinpads/pinpads/export?${queryParams.toString()}`;

                $.ajax({
                    url: exportUrl,
                    method: 'GET',
                    xhrFields: {
                        responseType: 'blob'
                    },
                    success: function (blob, status, xhr) {
                        // Create download link
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.style.display = 'none';
                        a.href = url;

                        // Set filename based on format
                        const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
                        a.download = `pinpad_monitoring_${timestamp}.${format}`;

                        // Trigger download
                        document.body.appendChild(a);
                        a.click();

                        // Cleanup
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);

                        // Hide loading overlay
                        $('#exportLoading').addClass('hidden');

                        // Show success message
                        showNotification(`Data exported successfully as ${format.toUpperCase()} file!`, 'success');
                    },
                    error: function (xhr, status, error) {
                        // Hide loading overlay
                        $('#exportLoading').addClass('hidden');

                        // Show error message
                        showNotification('Export failed. Please try again.', 'error');
                    }
                });
            }

            // Show notification function
            function showNotification(message, type) {
                const notification = $(`
                                                                                            <div class="fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
                    }">
                                                                                                ${message}
                                                                                            </div>
                                                                                        `);

                $('body').append(notification);

                // Auto remove after 3 seconds
                setTimeout(() => {
                    notification.fadeOut(() => notification.remove());
                }, 3000);
            }

            function formatDate(dateStr) {
                const date = new Date(dateStr);
                const day = String(date.getDate()).padStart(2, '0');
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const year = date.getFullYear();
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');
                const seconds = String(date.getSeconds()).padStart(2, '0');
                return `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`;
            }

            function loadRegional() {
                $.ajax({
                    url: 'http://localhost:5125/api/pinpads',
                    type: 'GET',
                    dataType: 'json',
                    success: function (response) {
                        const pinpads = response.data || [];
                        let regionals = [...new Set(pinpads.map(p => p.regional).filter(r => r))];

                        const $select = $('#regionalSelect');
                        $select.empty().append('<option value="">--Select Regional--</option>');
                        regionals.forEach(reg => $select.append(`<option value="${reg}">${reg}</option>`));
                    }
                });
            }

            function loadCabangInduk(filterRegional = "") {
                $.ajax({
                    url: 'http://localhost:5125/api/pinpads',
                    type: 'GET',
                    dataType: 'json',
                    data: filterRegional ? { loc: filterRegional } : {},
                    success: function (response) {
                        const pinpads = response.data || [];
                        let cabangs = [...new Set(pinpads.map(p => p.cabangInduk).filter(c => c))];

                        const $select = $('#cabangIndukSelect');
                        $select.empty().append('<option value="">--Select Cabang Induk--</option>');
                        cabangs.forEach(cb => $select.append(`<option value="${cb}">${cb}</option>`));

                        // Reset outlet dropdown
                        $('#outletSelect').empty().append('<option value="">--Select Outlet--</option>');
                    }
                });
            }

            function loadOutlets(filterRegional = "", filterCabangInduk = "") {
                $.ajax({
                    url: 'http://localhost:5125/api/pinpads',
                    type: 'GET',
                    dataType: 'json',
                    data: { loc: filterRegional, cabangInduk: filterCabangInduk },
                    success: function (response) {
                        const pinpads = response.data || [];
                        let outlets = [...new Set(pinpads.map(p => p.kodeOutlet).filter(o => o))];

                        const $select = $('#outletSelect');
                        $select.empty().append('<option value="">--Select Outlet--</option>');
                        outlets.forEach(outlet => $select.append(`<option value="${outlet}">${outlet}</option>`));
                    }
                });
            }

            // Function to update page size selector
            function updatePageSizeSelector() {
                $('#pageSizeSelect').val(rowsPerPage);
            }

            // Function to ensure pagination is visible and working
            function ensurePaginationVisible() {

                // Ensure pagination section exists and is visible
                ensurePaginationSectionExists();

                // Update page size selector
                updatePageSizeSelector();

            }

            // Function to ensure pagination section exists in HTML
            function ensurePaginationSectionExists() {
                // Check if pagination section exists
                if ($('#paginationButtons').length === 0) {
                    // Find the pagination container
                    const paginationContainer = $('.px-6.py-4.border-t.border-gray-200.bg-gray-50 .flex.flex-col.md\\:flex-row.justify-between.items-center.gap-4');

                    if (paginationContainer.length > 0) {
                        const paginationHtml = `
                                                                                                    <div class="flex items-center space-x-2" id="paginationButtons">
                                                                                                        <button id="prevBtn"
                                                                                                            class="px-3 py-2 border border-gray-300 rounded hover:bg-gray-100 text-sm transition-colors disabled:opacity-50 disabled:cursor-not-allowed bg-white"
                                                                                                            disabled>
                                                                                                            Previous
                                                                                                        </button>
                                                                                                        <span id="pageNumbers" class="flex space-x-1"></span>
                                                                                                        <button id="nextBtn"
                                                                                                            class="px-3 py-2 border border-gray-300 rounded hover:bg-gray-100 text-sm transition-colors disabled:opacity-50 disabled:cursor-not-allowed bg-white"
                                                                                                            disabled>
                                                                                                            Next
                                                                                                        </button>
                                                                                                    </div>
                                                                                                `;
                        paginationContainer.append(paginationHtml);
                    }
                } else {
                    // Ensure pagination is visible
                    $('#paginationButtons').show();
                    $('#prevBtn').show();
                    $('#nextBtn').show();
                    $('#pageNumbers').show();
                }
            }

            // Call this function after loading data
            function loadPinpads(filters = {}) {
                $.ajax({
                    url: 'http://localhost:5125/api/pinpads',
                    type: 'GET',
                    dataType: 'json',
                    data: filters,
                    success: function (response) {
                        allPinpads = response.data || [];
                        currentPage = 1; // reset halaman pertama

                        // Ensure pagination is visible before rendering
                        ensurePaginationVisible();
                        renderTable();
                    },
                    error: function (xhr, status, error) {
                        $('#tableBody').empty().append('<tr><td colspan="13" class="text-center py-4">Failed to load pinpad data.</td></tr>');
                        $('#tableInfo').text('Showing 0 to 0 of 0 entries');
                        $('#paginationButtons').empty();
                    }
                });
            }

            function renderTable() {

                // Sort data first
                const sortedData = sortData([...allPinpads]);

                const start = (currentPage - 1) * rowsPerPage;
                const end = start + rowsPerPage;
                const pageData = sortedData.slice(start, end);

                $('#tableBody').empty();
                if (pageData.length === 0) {
                    $('#tableBody').append(`
                                                                                                <tr>
                                                                                                    <td colspan="13" class="text-center py-8 text-gray-500">
                                                                                                        <div class="flex flex-col items-center space-y-2">
                                                                                                            <p class="text-sm font-medium text-gray-600">No data available</p>
                                                                                                            <p class="text-xs text-gray-500">Try adjusting your search criteria</p>
                                                                                                        </div>
                                                                                                    </td>
                                                                                                </tr>
                                                                                            `);
                } else {
                    pageData.forEach((item, index) => {
                        const row = `
                                                                                                    <tr class="border-b border-gray-100 hover:bg-gray-50 transition-colors">
                                                                                                        <td class="px-4 py-3 text-gray-900">${item.regional || '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900">${item.cabangInduk || '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900 font-mono">${item.kodeOutlet || '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900">${item.location || '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900">${item.registerDate ? formatDate(item.registerDate) : '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900">${item.updateDate ? formatDate(item.updateDate) : '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900 font-mono">${item.serialNumber || '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900">${item.tid || '-'}</td>
                                                                                                        <td class="px-4 py-3">
                                                                                                            <span class="inline-block px-2 py-1 text-xs font-medium rounded-full ${getStatusClass(item.statusPinpad)}">
                                                                                                                ${item.statusPinpad || '-'}
                                                                                                            </span>
                                                                                                        </td>
                                                                                                        <td class="px-4 py-3 text-gray-900">${item.createBy || '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900 font-mono">${item.ipLow || '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900 font-mono">${item.ipHigh || '-'}</td>
                                                                                                        <td class="px-4 py-3 text-gray-900">${item.lastActivity ? formatDate(item.lastActivity) : '-'}</td>
                                                                                                    </tr>
                                                                                                `;
                        $('#tableBody').append(row);
                    });
                }

                renderPagination();
                updatePaginationInfo();
            }

            function getStatusClass(status) {
                if (!status) return 'bg-gray-100 text-gray-800';

                switch (status.toLowerCase()) {
                    case 'ready to use': return 'bg-green-100 text-green-800';
                    case 'not ready to use': return 'bg-red-100 text-red-800';
                    case 'maintenance': return 'bg-yellow-100 text-yellow-800';
                    case 'in use': return 'bg-blue-100 text-blue-800';
                    default: return 'bg-gray-100 text-gray-800';
                }
            }

            function renderPagination() {
                const totalPages = Math.ceil(allPinpads.length / rowsPerPage);

                // Ensure pagination section exists and is visible
                ensurePaginationSectionExists();

                // Update page size selector
                updatePageSizeSelector();

                const $pageNumbers = $('#pageNumbers').empty();

                if (totalPages <= 1) {
                    $('#prevBtn').prop('disabled', true);
                    $('#nextBtn').prop('disabled', true);
                    return;
                }

                // Previous button
                $('#prevBtn').prop('disabled', currentPage === 1);

                // Page numbers
                for (let i = 1; i <= totalPages; i++) {
                    const btn = $('<button>')
                        .text(i)
                        .addClass('px-3 py-1 border rounded text-sm transition-colors')
                        .toggleClass('bg-blue-500 text-white border-blue-500', i === currentPage)
                        .toggleClass('hover:bg-gray-100', i !== currentPage)
                        .attr('data-page', i);

                    $pageNumbers.append(btn);
                }

                // Next button
                $('#nextBtn').prop('disabled', currentPage === totalPages);

                // Ensure pagination is visible
                $('#paginationButtons').show();
                $('#prevBtn').show();
                $('#nextBtn').show();
                $('#pageNumbers').show();
            }

            function updatePaginationInfo() {
                const totalRows = allPinpads.length;
                const start = totalRows === 0 ? 0 : (currentPage - 1) * rowsPerPage + 1;
                const end = Math.min(currentPage * rowsPerPage, totalRows);
                $('#tableInfo').text(`Showing ${start} to ${end} of ${totalRows} entries`);

                // Also update debug info
                // updateDebugInfo(); // Removed
            }

            // Reload jika filter dipilih
            $('#regionalSelect').change(function () {
                const regional = $(this).val();
                // Hanya update dropdown options, jangan load data
                if (regional) {
                    loadCabangInduk(regional);
                } else {
                    // Reset cabang dan outlet jika regional kosong
                    $('#cabangIndukSelect').empty().append('<option value="">--Select Cabang Induk--</option>');
                    $('#outletSelect').empty().append('<option value="">--Select Outlet--</option>');
                }
            });

            $('#cabangIndukSelect').change(function () {
                const cabang = $(this).val();
                const regional = $('#regionalSelect').val();
                // Hanya update outlet options, jangan load data
                if (cabang && regional) {
                    // Filter outlet berdasarkan regional dan cabang
                    loadOutlets(regional, cabang);
                } else {
                    $('#outletSelect').empty().append('<option value="">--Select Outlet--</option>');
                }
            });

            $('#outletSelect').change(function () {
                // Hanya update UI, jangan load data
                // Data akan di-load saat Search button diklik
            });

            // Function to ensure pagination is visible and working
        });
    </script>
    <script>
        $(document).ready(function () {
            const params = new URLSearchParams(window.location.search);
            const status = params.get('status');

            if (status) {
                $('#statusFilter').val(status);
                $('#searchBtn').click(); // langsung jalankan search
            }
        });

    </script>

}
