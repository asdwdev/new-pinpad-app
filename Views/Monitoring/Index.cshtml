@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Monitoring";
}

<div class="p-4 md:p-6">
    <!-- Breadcrumb -->
    <div class="mb-6 text-sm">
        <a href="#" class="text-teal-500 font-semibold hover:text-teal-600 transition-colors">Pinpad List</a> /
        <span class="text-gray-500">Monitoring</span>
    </div>

    <!-- Filter Form -->
    <div class="bg-white p-6 rounded-lg shadow-lg border border-gray-200 mb-6">
        <h3 class="text-lg font-semibold text-gray-800 mb-6">Search & Filter</h3>

        <!-- Two Column Layout -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Left Column -->
            <div class="space-y-4">
                <!-- Regional -->
                <div>
                    <label class="block text-gray-700 text-sm font-medium mb-2">Regional:</label>
                    <select id="regionalSelect"
                        class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-all">
                        <option value="">--Select Regional--</option>
                    </select>
                </div>

                <!-- Cabang Induk -->
                <div>
                    <label class="block text-gray-700 text-sm font-medium mb-2">Cabang Induk:</label>
                    <select id="cabangIndukSelect"
                        class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-all">
                        <option value="">--Select Cabang Induk--</option>
                    </select>
                </div>

                <!-- Outlet -->
                <div>
                    <label class="block text-gray-700 text-sm font-medium mb-2">Outlet:</label>
                    <select id="outletSelect"
                        class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-all">
                        <option value="">--Select Outlet--</option>
                    </select>
                </div>
            </div>

            <!-- Right Column -->
            <div class="space-y-4">
                <!-- Serial Number -->
                <div>
                    <label class="block text-gray-700 text-sm font-medium mb-2">Serial Number:</label>
                    <input type="text" id="serialNumberFilter" placeholder="Please enter your Serial Number"
                        class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-all">
                </div>

                <!-- Username -->
                <div>
                    <label class="block text-gray-700 text-sm font-medium mb-2">Username:</label>
                    <input type="text" id="usernameFilter" placeholder="Please enter your Username"
                        class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-all">
                </div>

                <!-- Status -->
                <div>
                    <label class="block text-gray-700 text-sm font-medium mb-2">Status:</label>
                    <select id="statusFilter"
                        class="w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-teal-500 focus:border-transparent transition-all">
                        <option value="">--Select Status Pinpad--</option>
                        <option value="Active">Active</option>
                        <option value="Inactive">Inactive</option>
                        <option value="NotReady">Not Ready To Use</option>
                        <option value="Ready">Ready To Use</option>
                        <option value="Maintenance">Maintenance</option>
                    </select>
                </div>
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex justify-end space-x-4 gap-2 mt-8">
            <button id="resetBtn"
                style="background-color: #6b7280; color: white; padding: 12px 24px; border-radius: 8px; font-weight: 600; font-size: 14px; border: none; cursor: pointer; transition: all 0.2s; box-shadow: 0 2px 4px rgba(0,0,0,0.1);"
                onmouseover="this.style.backgroundColor='#4b5563'; this.style.boxShadow='0 4px 8px rgba(0,0,0,0.15)'"
                onmouseout="this.style.backgroundColor='#6b7280'; this.style.boxShadow='0 2px 4px rgba(0,0,0,0.1)'">
                <i class="fa fa-refresh mr-2"></i>Reset
            </button>
            <button id="searchBtn"
                style="background-color: #14b8a6; color: white; padding: 16px 32px; border-radius: 8px; font-weight: 600; font-size: 14px; border: none; cursor: pointer; transition: all 0.2s; box-shadow: 0 2px 4px rgba(0,0,0,0.1);"
                onmouseover="this.style.backgroundColor='#0d9488'; this.style.boxShadow='0 4px 8px rgba(0,0,0,0.15)'"
                onmouseout="this.style.backgroundColor='#14b8a6'; this.style.boxShadow='0 2px 4px rgba(0,0,0,0.1)'">
                <i class="fa fa-search mr-2"></i>Search
            </button>
        </div>
    </div>

    <!-- Export Buttons (Hidden by default) -->
    <div id="exportSection" class="hidden mb-6">
        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <h4 class="text-sm font-semibold text-blue-800 mb-3">Export Data</h4>
            <div class="flex flex-wrap gap-3">
                <!-- Export PDF -->
                <button id="exportPdf"
                    style="background-color: #ef4444; color: white; padding: 8px 20px; border-radius: 8px; font-weight: 600; font-size: 14px; border: none; cursor: pointer; transition: all 0.2s;"
                    onmouseover="this.style.backgroundColor='#dc2626'"
                    onmouseout="this.style.backgroundColor='#ef4444'">
                    PDF
                </button>

                <!-- Export XLSX -->
                <button id="exportXlsx"
                    style="background-color:rgb(31, 199, 39); color: white; padding: 8px 20px; border-radius: 8px; font-weight: 600; font-size: 14px; border: none; cursor: pointer; transition: all 0.2s;"
                    onmouseover="this.style.backgroundColor='#2563eb'"
                    onmouseout="this.style.backgroundColor='#3b82f6'">
                    XLSX
                </button>

                <button id="exportCsv"
                    style="background-color:rgb(101, 101, 101); color: white; padding: 8px 20px; border-radius: 8px; font-weight: 600; font-size: 14px; border: none; cursor: pointer; transition: all 0.2s;"
                    onmouseover="this.style.backgroundColor='#10b981'"
                    onmouseout="this.style.backgroundColor='#10b981'">
                    CSV
                </button>
            </div>
        </div>
    </div>

    <!-- Loading Overlay for Export -->
    <div id="exportLoading" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 max-w-sm mx-4">
            <div class="flex items-center space-x-3">
                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                <div>
                    <p class="text-gray-800 font-medium">Exporting...</p>
                    <p class="text-gray-600 text-sm">Please wait while we prepare your file</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Table Container -->
    <div class="bg-white shadow-lg rounded-lg border border-gray-200 overflow-hidden">
        <!-- Table Header with Search -->
        <div class="px-6 py-4 border-b border-gray-200 bg-gray-50">
            <div class="flex flex-col md:flex-row justify-between items-center gap-4">
                <div class="flex items-center mt-2 md:mt-0">
                    <label class="text-sm text-gray-700 mr-3">Show:</label>
                    <select id="pageSizeSelect"
                        class="border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-blue-400 text-sm">
                        <option value="10">10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                        <option value="100">100</option>
                    </select>
                    <span class="text-sm text-gray-700 ml-2">entries</span>
                </div>
                <!-- Search Box -->
                <div class="flex items-center gap-2">
                    <label class="text-sm font-medium text-gray-700">Search:</label>
                    <input type="text" id="searchInput" placeholder="Search in all columns..."
                        class="border border-gray-300 rounded px-3 py-2 text-sm focus:ring-2 focus:ring-teal-500 focus:border-transparent min-w-[250px]">
                </div>
            </div>
        </div>

        <!-- Table Responsive Wrapper -->
        <div class="overflow-x-auto">
            <table id="pinpadListTable" class="min-w-full text-left border-collapse">
                <thead>
                    <tr class="bg-gray-100 text-gray-700 text-sm">
                        <th class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200"
                            data-column="regional">
                            <div class="flex items-center justify-between">
                                <span>Regional</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200"
                            data-column="cabangInduk">
                            <div class="flex items-center justify-between">
                                <span>Cabang Induk</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200"
                            data-column="kodeOutlet">
                            <div class="flex items-center justify-between">
                                <span>Kode Outlet</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200"
                            data-column="location">
                            <div class="flex items-center justify-between">
                                <span>Location</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200"
                            data-column="registerDate">
                            <div class="flex items-center justify-between">
                                <span>Register</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200"
                            data-column="updateDate">
                            <div class="flex items-center justify-between">
                                <span>Update Date</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200"
                            data-column="serialNumber">
                            <div class="flex items-center justify-between">
                                <span>Serial Number</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200"
                            data-column="tid">
                            <div class="flex items-center justify-between">
                                <span>TID</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200"
                            data-column="statusPinpad">
                            <div class="flex items-center justify-between">
                                <span>Status Pinpad</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200"
                            data-column="createBy">
                            <div class="flex items-center justify-between">
                                <span>Create By</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200"
                            data-column="ipLow">
                            <div class="flex items-center justify-between">
                                <span>IP Low</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200"
                            data-column="ipHigh">
                            <div class="flex items-center justify-between">
                                <span>IP High</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                        <th class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors whitespace-nowrap border-b border-gray-200"
                            data-column="lastActivity">
                            <div class="flex items-center justify-between">
                                <span>Last Activity</span>
                                <div class="sort-indicator ml-2">
                                    <i class="fa fa-sort text-gray-400"></i>
                                </div>
                            </div>
                        </th>
                    </tr>
                </thead>
                <tbody id="tableBody" class="text-sm">
                    <!-- Data will be populated here -->
                </tbody>
            </table>
        </div>

        <!-- Pagination -->
        <div class="px-6 py-4 border-t border-gray-200 bg-gray-50">
            <div class="flex flex-col md:flex-row justify-between items-center gap-4">
                <div class="text-sm text-gray-600" id="tableInfo">
                    Showing 0 to 0 of 0 entries
                </div>
                <div class="flex items-center space-x-2" id="paginationContainer">
                    <button id="prevBtn"
                        class="px-3 py-2 border border-gray-300 rounded hover:bg-gray-100 text-sm transition-colors disabled:opacity-50 disabled:cursor-not-allowed bg-white"
                        disabled>
                        Previous
                    </button>
                    <div id="pageNumbers" class="flex space-x-1"></div>
                    <button id="nextBtn"
                        class="px-3 py-2 border border-gray-300 rounded hover:bg-gray-100 text-sm transition-colors disabled:opacity-50 disabled:cursor-not-allowed bg-white"
                        disabled>
                        Next
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            let allPinpads = [];
            let filteredPinpads = []; // Store filtered data separately
            let currentPage = 1;
            let rowsPerPage = 10;
            let currentFilters = {};
            let currentSort = { column: null, direction: 'asc' };

            // Initialize
            loadRegional();
            loadCabangInduk();

            // Show initial message
            showNoDataMessage();
            updatePaginationInfo(0);
            disablePagination();

            // Event Listeners
            $('#searchBtn').on('click', performSearch);
            $('#resetBtn').on('click', resetFilters);
            $('#pageSizeSelect').on('change', handlePageSizeChange);
            $('#searchInput').on('input', handleTableSearch);

            // Export button event listeners
            $('#exportPdf').on('click', () => exportData('pdf'));
            $('#exportCsv').on('click', () => exportData('csv'));
            $('#exportXlsx').on('click', () => exportData('xlsx'));

            // Pagination event handlers
            $(document).on('click', '#prevBtn', function () {
                if (!$(this).prop('disabled') && currentPage > 1) {
                    currentPage--;
                    renderTable();
                }
            });

            $(document).on('click', '#nextBtn', function () {
                const totalPages = Math.ceil(filteredPinpads.length / rowsPerPage);
                if (!$(this).prop('disabled') && currentPage < totalPages) {
                    currentPage++;
                    renderTable();
                }
            });

            $(document).on('click', '.page-btn', function () {
                const page = parseInt($(this).data('page'));
                if (page && page !== currentPage) {
                    currentPage = page;
                    renderTable();
                }
            });

            // Sorting event handler
            $(document).on('click', 'th[data-column]', function () {
                const column = $(this).data('column');
                handleSort(column);
            });

            // Dropdown change handlers
            $('#regionalSelect').change(function () {
                const regional = $(this).val();
                if (regional) {
                    loadCabangInduk(regional);
                } else {
                    resetDropdown('#cabangIndukSelect', '--Select Cabang Induk--');
                    resetDropdown('#outletSelect', '--Select Outlet--');
                }
            });

            $('#cabangIndukSelect').change(function () {
                const cabang = $(this).val();
                const regional = $('#regionalSelect').val();
                if (cabang && regional) {
                    loadOutlets(regional, cabang);
                } else {
                    resetDropdown('#outletSelect', '--Select Outlet--');
                }
            });

            // Functions
            function performSearch() {
                const filters = {
                    regional: $('#regionalSelect').val(),
                    cabangInduk: $('#cabangIndukSelect').val(),
                    outlet: $('#outletSelect').val(),
                    serialNumber: $('#serialNumberFilter').val(),
                    username: $('#usernameFilter').val(),
                    status: $('#statusFilter').val()
                };

                // Check if any filter is applied
                const hasFilters = Object.values(filters).some(value => value && value.trim() !== '');

                if (!hasFilters) {
                    alert('Please select at least one filter criteria before searching.');
                    return;
                }

                currentFilters = filters;

                // Build API filters
                const apiFilters = {};
                if (filters.regional) apiFilters.loc = filters.regional;
                if (filters.cabangInduk) apiFilters.cabangInduk = filters.cabangInduk;
                if (filters.outlet) apiFilters.outlet = filters.outlet;
                if (filters.serialNumber) apiFilters.serialNumber = filters.serialNumber;
                if (filters.username) apiFilters.username = filters.username;
                if (filters.status) apiFilters.status = filters.status;

                loadPinpads(apiFilters);
                $('#exportSection').removeClass('hidden');
            }

            function resetFilters() {
                // Clear all filter values
                $('#regionalSelect').val('');
                $('#cabangIndukSelect').val('');
                $('#outletSelect').val('');
                $('#serialNumberFilter').val('');
                $('#usernameFilter').val('');
                $('#statusFilter').val('');
                $('#searchInput').val('');

                // Clear data and state
                allPinpads = [];
                filteredPinpads = [];
                currentFilters = {};
                currentSort = { column: null, direction: 'asc' };
                currentPage = 1;
                rowsPerPage = 10;

                // Reset UI
                resetSortIndicators();
                $('#exportSection').addClass('hidden');
                showNoDataMessage();
                updatePaginationInfo(0);
                disablePagination();
                $('#pageSizeSelect').val(10);
            }

            function handlePageSizeChange() {
                rowsPerPage = parseInt($(this).val());
                currentPage = 1; // Reset to first page
                renderTable();
            }

            function handleTableSearch() {
                const searchTerm = $(this).val().toLowerCase().trim();

                if (searchTerm === '') {
                    filteredPinpads = [...allPinpads];
                } else {
                    filteredPinpads = allPinpads.filter(item => {
                        return Object.values(item).some(value =>
                            value && value.toString().toLowerCase().includes(searchTerm)
                        );
                    });
                }

                currentPage = 1; // Reset to first page when searching
                renderTable();
            }

            function handleSort(column) {
                if (currentSort.column === column) {
                    currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
                } else {
                    currentSort.column = column;
                    currentSort.direction = 'asc';
                }

                updateSortIndicators(column);
                currentPage = 1; // Reset to first page when sorting
                renderTable();
            }

            function updateSortIndicators(activeColumn) {
                // Reset all indicators
                $('.sort-indicator i').removeClass('fa-sort-up fa-sort-down text-blue-500').addClass('fa-sort text-gray-400');

                // Update active column indicator
                const $activeHeader = $(`th[data-column="${activeColumn}"]`);
                const $icon = $activeHeader.find('.sort-indicator i');

                $icon.removeClass('fa-sort text-gray-400').addClass('text-blue-500');
                if (currentSort.direction === 'asc') {
                    $icon.addClass('fa-sort-up');
                } else {
                    $icon.addClass('fa-sort-down');
                }
            }

            function resetSortIndicators() {
                $('.sort-indicator i').removeClass('fa-sort-up fa-sort-down text-blue-500').addClass('fa-sort text-gray-400');
            }

            function loadPinpads(filters = {}) {
                $.ajax({
                    url: 'http://localhost:5125/api/pinpads',
                    type: 'GET',
                    dataType: 'json',
                    data: filters,
                    success: function (response) {
                        allPinpads = response.data || [];
                        filteredPinpads = [...allPinpads]; // Initialize filtered data
                        currentPage = 1;
                        renderTable();
                    },
                    error: function (xhr, status, error) {
                        showErrorMessage('Failed to load pinpad data.');
                        allPinpads = [];
                        filteredPinpads = [];
                        updatePaginationInfo(0);
                        disablePagination();
                    }
                });
            }

            function renderTable() {
                const sortedData = sortData([...filteredPinpads]);
                const totalItems = sortedData.length;

                if (totalItems === 0) {
                    showNoDataMessage();
                    updatePaginationInfo(0);
                    disablePagination();
                    return;
                }

                // Calculate pagination
                const totalPages = Math.ceil(totalItems / rowsPerPage);

                // Ensure current page is valid
                if (currentPage > totalPages && totalPages > 0) {
                    currentPage = totalPages;
                }

                const start = (currentPage - 1) * rowsPerPage;
                const end = start + rowsPerPage;
                const pageData = sortedData.slice(start, end);

                // Render table rows
                renderTableRows(pageData);

                // Update pagination
                renderPagination(totalPages);
                updatePaginationInfo(totalItems);
            }

            function renderTableRows(data) {
                const $tbody = $('#tableBody').empty();

                data.forEach(item => {
                    const row = `
                                                                                                                        <tr class="border-b border-gray-100 hover:bg-gray-50 transition-colors">
                                                                                                                            <td class="px-4 py-3 text-gray-900">${item.regional || '-'}</td>
                                                                                                                            <td class="px-4 py-3 text-gray-900">${item.cabangInduk || '-'}</td>
                                                                                                                            <td class="px-4 py-3 text-gray-900 font-mono">${item.kodeOutlet || '-'}</td>
                                                                                                                            <td class="px-4 py-3 text-gray-900">${item.location || '-'}</td>
                                                                                                                            <td class="px-4 py-3 text-gray-900">${item.registerDate ? formatDate(item.registerDate) : '-'}</td>
                                                                                                                            <td class="px-4 py-3 text-gray-900">${item.updateDate ? formatDate(item.updateDate) : '-'}</td>
                                                                                                                            <td class="px-4 py-3 text-gray-900 font-mono">${item.serialNumber || '-'}</td>
                                                                                                                            <td class="px-4 py-3 text-gray-900">${item.tid || '-'}</td>
                                                                                                                            <td class="px-4 py-3">
                                                                                                                                <span class="inline-block px-2 py-1 text-xs font-medium rounded-full ${getStatusClass(item.statusPinpad)}">
                                                                                                                                    ${item.statusPinpad || '-'}
                                                                                                                                </span>
                                                                                                                            </td>
                                                                                                                            <td class="px-4 py-3 text-gray-900">${item.createBy || '-'}</td>
                                                                                                                            <td class="px-4 py-3 text-gray-900 font-mono">${item.ipLow || '-'}</td>
                                                                                                                            <td class="px-4 py-3 text-gray-900 font-mono">${item.ipHigh || '-'}</td>
                                                                                                                            <td class="px-4 py-3 text-gray-900">${item.lastActivity ? formatDate(item.lastActivity) : '-'}</td>
                                                                                                                        </tr>
                                                                                                                    `;
                    $tbody.append(row);
                });
            }

            function renderPagination(totalPages) {
                const $pageNumbers = $('#pageNumbers').empty();

                // Enable/disable navigation buttons
                $('#prevBtn').prop('disabled', currentPage <= 1);
                $('#nextBtn').prop('disabled', currentPage >= totalPages || totalPages === 0);

                if (totalPages <= 1) {
                    return;
                }

                // Calculate which pages to show
                let startPage = 1;
                let endPage = totalPages;

                // If there are many pages, show a window around current page
                if (totalPages > 7) {
                    if (currentPage <= 4) {
                        endPage = 7;
                    } else if (currentPage >= totalPages - 3) {
                        startPage = totalPages - 6;
                    } else {
                        startPage = currentPage - 3;
                        endPage = currentPage + 3;
                    }
                }

                // Add first page and ellipsis if needed
                if (startPage > 1) {
                    addPageButton(1);
                    if (startPage > 2) {
                        $pageNumbers.append('<span class="px-2 py-1 text-gray-500">...</span>');
                    }
                }

                // Add page buttons
                for (let i = startPage; i <= endPage; i++) {
                    addPageButton(i);
                }

                // Add ellipsis and last page if needed
                if (endPage < totalPages) {
                    if (endPage < totalPages - 1) {
                        $pageNumbers.append('<span class="px-2 py-1 text-gray-500">...</span>');
                    }
                    addPageButton(totalPages);
                }

                function addPageButton(page) {
                    const isActive = page === currentPage;
                    const $btn = $(`
                                                                                                                        <button class="page-btn px-3 py-1 border rounded text-sm transition-colors ${isActive
                            ? 'bg-blue-500 text-white border-blue-500'
                            : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-100'
                        }" data-page="${page}">
                                                                                                                            ${page}
                                                                                                                        </button>
                                                                                                                    `);
                    $pageNumbers.append($btn);
                }
            }

            function disablePagination() {
                $('#prevBtn').prop('disabled', true);
                $('#nextBtn').prop('disabled', true);
                $('#pageNumbers').empty();
            }

            function updatePaginationInfo(totalItems) {
                if (totalItems === 0) {
                    $('#tableInfo').text('Showing 0 to 0 of 0 entries');
                    return;
                }

                const start = (currentPage - 1) * rowsPerPage + 1;
                const end = Math.min(currentPage * rowsPerPage, totalItems);
                $('#tableInfo').text(`Showing ${start} to ${end} of ${totalItems} entries`);
            }

            function showNoDataMessage() {
                $('#tableBody').html(`
                                                                                                                    <tr>
                                                                                                                        <td colspan="13" class="text-center py-12 text-gray-500">
                                                                                                                            <div class="flex flex-col items-center space-y-3">
                                                                                                                                <p class="text-xl font-medium text-gray-600">No data to display</p>
                                                                                                                                <p class="text-sm text-gray-500">Please use the search form above to filter and view data</p>
                                                                                                                            </div>
                                                                                                                        </td>
                                                                                                                    </tr>
                                                                                                                `);
            }

            function showErrorMessage(message) {
                $('#tableBody').html(`
                                                                                                                    <tr>
                                                                                                                        <td colspan="13" class="text-center py-8 text-red-500">
                                                                                                                            <div class="flex flex-col items-center space-y-2">
                                                                                                                                <p class="text-sm font-medium">${message}</p>
                                                                                                                                <p class="text-xs">Please try again later</p>
                                                                                                                            </div>
                                                                                                                        </td>
                                                                                                                    </tr>
                                                                                                                `);
            }

            function sortData(data) {
                if (!currentSort.column || data.length === 0) {
                    return data;
                }

                return data.sort((a, b) => {
                    let aVal = a[currentSort.column];
                    let bVal = b[currentSort.column];

                    // Handle null/undefined values
                    if (aVal === null || aVal === undefined) aVal = '';
                    if (bVal === null || bVal === undefined) bVal = '';

                    // Handle date sorting
                    if (currentSort.column.includes('Date') || currentSort.column === 'lastActivity') {
                        aVal = new Date(aVal || 0);
                        bVal = new Date(bVal || 0);
                    }
                    // Handle numeric sorting for TID
                    else if (currentSort.column === 'tid') {
                        aVal = parseInt(aVal.toString().replace(/\D/g, '')) || 0;
                        bVal = parseInt(bVal.toString().replace(/\D/g, '')) || 0;
                    }
                    // Handle IP address sorting
                    else if (currentSort.column.includes('ip')) {
                        aVal = ipToNumber(aVal.toString());
                        bVal = ipToNumber(bVal.toString());
                    }
                    // Handle serial number sorting
                    else if (currentSort.column === 'serialNumber') {
                        aVal = parseInt(aVal.toString().replace(/\D/g, '')) || 0;
                        bVal = parseInt(bVal.toString().replace(/\D/g, '')) || 0;
                    }
                    // Handle kode outlet sorting
                    else if (currentSort.column === 'kodeOutlet') {
                        aVal = parseInt(aVal.toString().replace(/\D/g, '')) || 0;
                        bVal = parseInt(bVal.toString().replace(/\D/g, '')) || 0;
                    }
                    // String comparison
                    else {
                        aVal = aVal.toString().toLowerCase();
                        bVal = bVal.toString().toLowerCase();
                    }

                    let result = 0;
                    if (aVal < bVal) result = -1;
                    else if (aVal > bVal) result = 1;

                    return currentSort.direction === 'desc' ? -result : result;
                });
            }

            function ipToNumber(ip) {
                if (!ip || ip === '-') return 0;
                const parts = ip.split('.');
                if (parts.length !== 4) return 0;
                return parts.reduce((acc, part, index) => {
                    return acc + (parseInt(part) * Math.pow(256, 3 - index));
                }, 0);
            }

            function formatDate(dateStr) {
                if (!dateStr) return '-';
                const date = new Date(dateStr);
                if (isNaN(date.getTime())) return '-';

                const day = String(date.getDate()).padStart(2, '0');
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const year = date.getFullYear();
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');
                const seconds = String(date.getSeconds()).padStart(2, '0');
                return `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`;
            }

            function getStatusClass(status) {
                if (!status) return 'bg-gray-100 text-gray-800';

                switch (status.toLowerCase()) {
                    case 'active':
                    case 'ready':
                        return 'bg-green-100 text-green-800';
                    case 'inactive':
                    case 'notready':
                        return 'bg-red-100 text-red-800';
                    default:
                        return 'bg-gray-100 text-gray-800';
                }
            }

            function loadRegional() {
                $.ajax({
                    url: 'http://localhost:5125/api/pinpads',
                    type: 'GET',
                    dataType: 'json',
                    success: function (response) {
                        const pinpads = response.data || [];
                        const regionals = [...new Set(pinpads.map(p => p.regional).filter(r => r))];
                        populateDropdown('#regionalSelect', regionals, '--Select Regional--');
                    },
                    error: function () {
                        console.error('Failed to load regional data');
                    }
                });
            }

            function loadCabangInduk(filterRegional = "") {
                const data = filterRegional ? { loc: filterRegional } : {};

                $.ajax({
                    url: 'http://localhost:5125/api/pinpads',
                    type: 'GET',
                    dataType: 'json',
                    data: data,
                    success: function (response) {
                        const pinpads = response.data || [];
                        const cabangs = [...new Set(pinpads.map(p => p.cabangInduk).filter(c => c))];
                        populateDropdown('#cabangIndukSelect', cabangs, '--Select Cabang Induk--');
                        resetDropdown('#outletSelect', '--Select Outlet--');
                    },
                    error: function () {
                        console.error('Failed to load cabang induk data');
                    }
                });
            }

            function loadOutlets(filterRegional = "", filterCabangInduk = "") {
                $.ajax({
                    url: 'http://localhost:5125/api/pinpads',
                    type: 'GET',
                    dataType: 'json',
                    data: { loc: filterRegional, cabangInduk: filterCabangInduk },
                    success: function (response) {
                        const pinpads = response.data || [];
                        const outlets = [...new Set(pinpads.map(p => p.kodeOutlet).filter(o => o))];
                        populateDropdown('#outletSelect', outlets, '--Select Outlet--');
                    },
                    error: function () {
                        console.error('Failed to load outlet data');
                    }
                });
            }

            function populateDropdown(selector, items, defaultText) {
                const $select = $(selector).empty();
                $select.append(`<option value="">${defaultText}</option>`);
                items.forEach(item => {
                    $select.append(`<option value="${item}">${item}</option>`);
                });
            }

            function resetDropdown(selector, defaultText) {
                $(selector).empty().append(`<option value="">${defaultText}</option>`);
            }

            function exportData(format) {
                $('#exportLoading').removeClass('hidden');

                const queryParams = new URLSearchParams();
                queryParams.append('format', format);

                // Map UI filter keys to API parameter names
                const paramMap = {
                    regional: 'loc',          // ganti dari 'area'
                    cabangInduk: 'cabangInduk', // ganti dari 'branch'
                    outlet: 'q',              // free text search
                    serialNumber: 'serialNumber',
                    username: 'username',
                    status: 'status'
                };
                // Add filters to query params using mapping
                Object.keys(currentFilters || {}).forEach(key => {
                    const val = currentFilters[key];
                    if (val && val.toString().trim() !== '') {
                        const apiKey = paramMap[key] || key;
                        queryParams.append(apiKey, val);
                    }
                });

                const exportUrl = `http://localhost:5125/api/Pinpads/export?${queryParams.toString()}`;

                $.ajax({
                    url: exportUrl,
                    method: 'GET',
                    xhrFields: { responseType: 'blob' },
                    success: function (blob, status, xhr) {
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.style.display = 'none';
                        a.href = url;

                        const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
                        a.download = `pinpad_monitoring_${timestamp}.${format}`;

                        document.body.appendChild(a);
                        a.click();

                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                        $('#exportLoading').addClass('hidden');
                        showNotification(`Data exported successfully as ${format.toUpperCase()} file!`, 'success');
                    },
                    error: function (xhr) {
                        $('#exportLoading').addClass('hidden');
                        showNotification('Export failed. Please try again.', 'error');
                    }
                });
            }

            function showNotification(message, type) {
                const bgClass = type === 'success' ? 'bg-green-500' : 'bg-red-500';
                const notification = $(`
                                                                                                                    <div class="fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 ${bgClass} text-white">
                                                                                                                        ${message}
                                                                                                                    </div>
                                                                                                                `);

                $('body').append(notification);
                setTimeout(() => {
                    notification.fadeOut(() => notification.remove());
                }, 3000);
            }

            // Handle URL parameters for status filter
            const params = new URLSearchParams(window.location.search);
            const status = params.get('status');
            if (status) {
                $('#statusFilter').val(status);
                $('#searchBtn').click();
            }
        });
    </script>
}