@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Edit User";
    var id = ViewBag.Id;
}

<div class="max-w-3xl mx-auto bg-white shadow-md rounded-xl p-6">
    <h2 class="text-xl font-semibold mb-6">Edit User</h2>

    <form id="editUserForm" class="space-y-4">
        <!-- Hidden ID -->
        <input type="hidden" name="id" id="userId">

        <!-- Username -->
        <div>
            <label class="block text-sm font-medium text-gray-700">Username</label>
            <input type="text" name="username" id="username" required
                class="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none">
        </div>

        <!-- Password (optional update) -->
        <div>
            <label class="block text-sm font-medium text-gray-700">Password</label>
            <input type="password" name="password" id="password"
                class="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none"
                placeholder="Leave blank if not changing">
        </div>

        <!-- Full Name -->
        <div>
            <label class="block text-sm font-medium text-gray-700">Full Name</label>
            <input type="text" name="fullName" id="fullName" required
                class="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none">
        </div>

        <!-- Email -->
        <div>
            <label class="block text-sm font-medium text-gray-700">Email</label>
            <input type="email" name="email" id="email" required
                class="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none">
        </div>

        <!-- Type -->
        <div>
            <label class="block text-sm font-medium text-gray-700">Type</label>
            <select name="type" id="type" required
                class="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none">
                <option value="1">Internal</option>
                <option value="2">External</option>
            </select>
        </div>

        <!-- Access Level -->
        <div>
            <label class="block text-sm font-medium text-gray-700">Access Level</label>
            <select name="accessLevel" id="accessLevel" required
                class="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none">
                <option value="">-- Select Access Level --</option>
            </select>
        </div>

        <!-- Branch -->
        <div>
            <label class="block text-sm font-medium text-gray-700">Branch Type</label>
            <select name="branch" id="branchSelect"
                class="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none">
                <option value="">-- Select Branch Type --</option>
            </select>
        </div>

        <!-- NIP -->
        <div>
            <label class="block text-sm font-medium text-gray-700">NIP</label>
            <input type="text" name="nip" id="nip"
                class="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-blue-500 focus:outline-none">
        </div>

        <!-- Locked -->
        <div class="flex items-center space-x-2">
            <input type="checkbox" name="isLocked" id="isLocked" class="h-4 w-4 text-blue-600 border-gray-300 rounded">
            <label for="isLocked" class="text-sm font-medium text-gray-700">Locked</label>
        </div>

        <!-- Save & Cancel -->
        <div class="flex justify-end space-x-3 pt-4">
            <a href="/User/Index" class="px-4 py-2 rounded-lg border border-gray-300 text-gray-700 hover:bg-gray-100">
                Cancel
            </a>
            <button type="submit" class="px-4 py-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700">
                Save
            </button>
        </div>
    </form>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    $(document).ready(function () {
        const userId = window.location.pathname.split("/").pop();
        let currentBranch = "";  // simpan branch dari user
        let currentAccessLevel = ""; // simpan access level dari user

        // Load user data
        $.ajax({
            url: `http://localhost:5125/api/users/${userId}`,
            method: "GET",
            success: function (user) {
                $("#userId").val(user.id);
                $("#username").val(user.username);
                $("#fullName").val(user.fullName);
                $("#email").val(user.email);
                $("#type").val(user.type);
                $("#nip").val(user.nip);
                $("#isLocked").prop("checked", user.isLocked);

                currentBranch = user.branch;
                currentAccessLevel = user.accessLevel;

                // setelah user data didapat, load dropdowns
                loadBranchTypes();
                loadSysLevels();
            },
            error: function () {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to load user data'
                }).then(() => {
                    window.location.href = "/User/Index";
                });
            }
        });

        // Load branch types dari API
        function loadBranchTypes() {
            $.ajax({
                url: "http://localhost:5125/api/branches/branch-types",
                method: "GET",
                success: function (res) {
                    if (Array.isArray(res)) {
                        res.forEach(branch => {
                            const selected = branch.code === currentBranch ? "selected" : "";
                            $("#branchSelect").append(
                                `<option value="${branch.code}" ${selected}>${branch.name} (${branch.code})</option>`
                            );
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to load branch types'
                    });
                }
            });
        }

        // Load sys levels dari API
        function loadSysLevels() {
            $.ajax({
                url: "http://localhost:5125/api/syslevels/dropdown",
                method: "GET",
                success: function (res) {
                    if (Array.isArray(res)) {
                        res.forEach(level => {
                            const selected = level.id == currentAccessLevel ? "selected" : "";
                            $("#accessLevel").append(
                                `<option value="${level.id}" ${selected}>${level.name}</option>`
                            );
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to load access levels'
                    });
                }
            });
        }

        // Handle update
        $("#editUserForm").on("submit", function (e) {
            e.preventDefault();

            const formData = {
                id: $("#userId").val(),
                username: $("#username").val(),
                password: $("#password").val(), // optional
                fullName: $("#fullName").val(),
                email: $("#email").val(),
                type: $("#type").val(),
                accessLevel: $("#accessLevel").val(), // dari API
                branch: $("#branchSelect").val(),
                nip: $("#nip").val(),
                isLocked: $("#isLocked").is(":checked")
            };

            $.ajax({
                url: `http://localhost:5125/api/users/${formData.id}`,
                method: "PUT",
                contentType: "application/json",
                data: JSON.stringify(formData),
                success: function (res) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Updated',
                        text: res.message || 'User has been updated successfully!',
                        timer: 2000,
                        showConfirmButton: false
                    }).then(() => {
                        window.location.href = "/User/Index";
                    });
                },
                error: function (xhr) {
                    const res = xhr.responseJSON;
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed',
                        text: res?.message || 'Failed to update user'
                    });
                }
            });
        });
    });
</script>
