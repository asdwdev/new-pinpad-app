@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Regional";
}

<div class="p-6">
    <!-- Breadcrumb -->
    <div class="mb-4 text-sm">
        <a href="#" class="text-teal-500 font-semibold hover:text-teal-600 transition-colors">Regional</a> /
        <span class="text-gray-500">Inquiry</span>
    </div>

    <!-- Baris 1: Tambah Regional -->
    <div class="mb-4">
        <a href="/Regional/Create"
            class="bg-teal-500 hover:bg-teal-600 text-white px-4 py-2 rounded-md shadow text-sm font-medium transition-colors inline-flex items-center">
            <span class="mr-1 font-bold text-lg">+</span> Tambah Regional
        </a>
    </div>

    <!-- Baris 2: Show Entries (kiri) dan Search (kanan) -->
    <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-4">
        <!-- Show Entries -->
        <div class="flex items-center space-x-2 mb-3 md:mb-0">
            <label for="entriesSelect" class="text-sm text-gray-700">Show</label>
            <select id="entriesSelect"
                class="border border-gray-300 rounded px-2 py-1 text-sm focus:ring-2 focus:ring-teal-500">
                <option value="10" selected>10</option>
                <option value="25">25</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select>
            <span class="text-sm text-gray-700">entries</span>
        </div>

        <!-- Search -->
        <div>
            <div class="flex items-center">
                <label for="searchInput" class="text-sm text-gray-700 mr-2">Search:</label>
                <input type="text" id="searchInput" placeholder="Search..."
                    class="border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-teal-500 text-sm min-w-[220px]">
            </div>
        </div>
    </div>

    <!-- Table -->
    <div class="bg-white shadow rounded-lg border border-gray-200 overflow-hidden">
        <table class="w-full text-left border-collapse">
            <thead class="bg-gray-100 text-gray-700 text-sm">
                <tr>
                    <th class="px-4 py-3 font-semibold">Code</th>
                    <th class="px-4 py-3 font-semibold">Nama</th>
                    <th class="px-4 py-3 font-semibold text-center">Action</th>
                </tr>
            </thead>
            <tbody id="tableBody" class="text-sm">
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <div class="flex flex-col md:flex-row justify-between items-center mt-4">
        <div class="text-sm text-gray-600 mb-2 md:mb-0" id="tableInfo">
            Showing 1 to 2 of 2 entries
        </div>
        <div class="flex space-x-1" id="paginationButtons">
            <button id="prevBtn"
                class="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-100 text-sm transition-colors disabled:opacity-50 disabled:cursor-not-allowed bg-white text-gray-700 font-medium"
                disabled>
                ← Previous
            </button>
            <span id="pageNumbers" class="flex space-x-1">
                <button class="px-3 py-1 border border-teal-500 bg-teal-500 text-white rounded-md text-sm">1</button>
            </span>
            <button id="nextBtn"
                class="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-100 text-sm transition-colors disabled:opacity-50 disabled:cursor-not-allowed bg-white text-gray-700 font-medium"
                disabled>
                Next →
            </button>
        </div>
    </div>
</div>


<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $(document).ready(function () {
        // Global variables
        let allData = [];
        let filteredData = [];
        let currentPage = 1;
        let pageSize = 10;
        let currentSort = { column: null, direction: 'asc' };
        let searchTerm = '';

        // Initialize
        loadPinpads();

        // Event listeners
        $('#searchInput').on('input', function () {
            searchTerm = $(this).val().toLowerCase();
            currentPage = 1; // Reset to first page when searching
            filterAndDisplayData();
        });

        $('#pageSizeSelect').on('change', function () {
            pageSize = parseInt($(this).val());
            currentPage = 1; // Reset to first page when changing page size
            filterAndDisplayData();
        });

        // Column sorting
        $('th[data-sort]').on('click', function () {
            const column = $(this).data('sort');
            if (currentSort.column === column) {
                currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
            } else {
                currentSort.column = column;
                currentSort.direction = 'asc';
            }

            updateSortIcons();
            filterAndDisplayData();
        });

        function updateSortIcons() {
            $('.sort-icon').text('↕');
            if (currentSort.column) {
                const icon = currentSort.direction === 'asc' ? '↑' : '↓';
                $(`th[data-sort="${currentSort.column}"] .sort-icon`).text(icon);
            }
        }

        function loadPinpads() {
            $.ajax({
                url: 'http://localhost:5125/api/regionals',
                type: 'GET',
                dataType: 'json',
                data: { page: 1, size: 1000 },
                success: function (response) {
                    // Karena API return array langsung
                    allData = response || [];
                    filteredData = [...allData];
                    filterAndDisplayData();
                    $(document).trigger('dataLoaded'); // Trigger event when data is loaded
                },
                error: function (xhr, status, error) {
                    $('#tableBody').html('<tr><td colspan="5" class="text-center py-4 text-red-500">Error loading data</td></tr>');
                }
            });
        }

        function filterAndDisplayData() {
            // Filter data based on search term
            if (searchTerm) {
                filteredData = allData.filter(item => {
                    return (
                        (item.code && item.code.toLowerCase().includes(searchTerm)) ||
                        (item.name && item.name.toLowerCase().includes(searchTerm))
                    );
                });
            } else {
                filteredData = [...allData];
            }

            // Sort data if column is selected
            if (currentSort.column) {
                sortData();
            }

            // Display data with pagination
            displayPaginatedData();
        }

        function sortData() {
            filteredData.sort((a, b) => {
                let aVal = a[currentSort.column] || '';
                let bVal = b[currentSort.column] || '';

                // Handle date sorting
                if (currentSort.column === 'registerDate') {
                    aVal = new Date(aVal || '1900-01-01');
                    bVal = new Date(bVal || '1900-01-01');
                } else {
                    // String sorting
                    aVal = aVal.toString().toLowerCase();
                    bVal = bVal.toString().toLowerCase();
                }

                if (aVal < bVal) return currentSort.direction === 'asc' ? -1 : 1;
                if (aVal > bVal) return currentSort.direction === 'asc' ? 1 : -1;
                return 0;
            });
        }

        function displayPaginatedData() {
            const totalItems = filteredData.length;
            const totalPages = Math.ceil(totalItems / pageSize);

            // Ensure current page is valid
            if (totalPages === 0) {
                currentPage = 1;
            } else if (currentPage > totalPages) {
                currentPage = totalPages;
            }

            const startIndex = (currentPage - 1) * pageSize;
            const endIndex = Math.min(startIndex + pageSize, totalItems);
            const pageData = filteredData.slice(startIndex, endIndex);

            // Clear table body
            $('#tableBody').empty();

            if (pageData.length === 0) {
                $('#tableBody').append('<tr><td colspan="5" class="text-center py-4 text-gray-500">No data available</td></tr>');
            } else {
                // Populate table
                pageData.forEach(function (item) {
                    const statusClass = getStatusClass(item.status);
                    const row = `
                <tr class="border-b hover:bg-gray-50">
                  <td class="px-4 py-3">${item.code || ''}</td>
                  <td class="px-4 py-3 font-mono">${item.name || ''}</td>
                  <td class="px-4 py-3 text-center space-x-2">
                        <a href="/Regional/Edit/${item.id}"
                        class="bg-orange-500 hover:bg-orange-600 text-white px-3 py-1 rounded text-sm transition-colors">
                        ✎
                        </a>
                        <button onclick="deleteRegional(${item.id})"
                                class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm transition-colors">
                            ✕
                        </button>
                    </td>
                </tr>
              `;
                    $('#tableBody').append(row);
                });

            }

            // Update pagination info and controls
            updatePaginationInfo(startIndex, endIndex, totalItems);
            updatePaginationControls(totalPages);
        }

        function updatePaginationInfo(start, end, total) {
            const displayStart = total === 0 ? 0 : start + 1;
            const displayEnd = end;
            $('#tableInfo').text(`Showing ${displayStart} to ${displayEnd} of ${total} entries`);
        }

        function updatePaginationControls(totalPages) {
            // Update prev/next buttons
            $('#prevBtn').prop('disabled', currentPage <= 1);
            $('#nextBtn').prop('disabled', currentPage >= totalPages);

            // Update page numbers
            updatePageNumbers(currentPage, totalPages);
        }

        function updatePageNumbers(current, totalPages) {
            const container = $('#pageNumbers');
            container.empty();

            if (totalPages <= 1) return;

            const maxButtons = 5;
            let startPage = Math.max(1, current - Math.floor(maxButtons / 2));
            let endPage = Math.min(totalPages, startPage + maxButtons - 1);
            startPage = Math.max(1, endPage - maxButtons + 1);

            // Add first page button if needed
            if (startPage > 1) {
                container.append(createPageButton(1, current));
                if (startPage > 2) {
                    container.append('<span class="px-2 py-1 text-gray-500">...</span>');
                }
            }

            // Add page number buttons
            for (let i = startPage; i <= endPage; i++) {
                container.append(createPageButton(i, current));
            }

            // Add last page button if needed
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    container.append('<span class="px-2 py-1 text-gray-500">...</span>');
                }
                container.append(createPageButton(totalPages, current));
            }
        }

        function createPageButton(pageNum, currentPageParam) {
            const btn = $('<button>')
                .addClass('px-3 py-1 border rounded text-sm transition-colors')
                .text(pageNum)
                .toggleClass('bg-blue-500 text-white border-blue-500', pageNum === currentPageParam)
                .toggleClass('hover:bg-gray-100', pageNum !== currentPageParam)
                .on('click', function () {
                    if (pageNum !== currentPage) {
                        currentPage = pageNum;
                        displayPaginatedData();
                    }
                });
            return btn;
        }

        // Simple pagination button handlers
        $('#prevBtn').on('click', function () {
            if (currentPage > 1) {
                currentPage--;
                displayPaginatedData();
            }
        });

        $('#nextBtn').on('click', function () {
            const totalPages = Math.ceil(filteredData.length / pageSize);
            if (currentPage < totalPages) {
                currentPage++;
                displayPaginatedData();
            }
        });

        // Force enable buttons if they get stuck disabled
        function forceEnableButtons() {
            const totalPages = Math.ceil(filteredData.length / pageSize);
            if (totalPages > 1) {
                $('#prevBtn').prop('disabled', false);
                $('#nextBtn').prop('disabled', false);
            }
        }

        // Call this function periodically to ensure buttons don't get stuck
        setInterval(forceEnableButtons, 2000);

        // Also enable buttons when data changes
        $(document).on('dataLoaded', function () {
            setTimeout(forceEnableButtons, 100);
        });

        function formatDate(dateStr) {
            if (!dateStr) return '';
            try {
                const date = new Date(dateStr);
                if (isNaN(date.getTime())) return dateStr;

                const day = String(date.getDate()).padStart(2, '0');
                const month = String(date.getMonth() + 1).padStart(2, '0');
                const year = date.getFullYear();
                const hours = String(date.getHours()).padStart(2, '0');
                const minutes = String(date.getMinutes()).padStart(2, '0');
                const seconds = String(date.getSeconds()).padStart(2, '0');
                return `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`;
            } catch (e) {
                return dateStr;
            }
        }

        function getStatusClass(status) {
            if (!status) return 'bg-gray-100 text-gray-800';

            switch (status.toLowerCase()) {
                case 'active': return 'bg-green-100 text-green-800';
                case 'inactive': return 'bg-gray-100 text-gray-800';
                case 'repair': return 'bg-yellow-100 text-yellow-800';
                case 'maintenance': return 'bg-orange-100 text-orange-800';
                case 'error': return 'bg-red-100 text-red-800';
                default: return 'bg-gray-100 text-gray-800';
            }
        }
    });
</script>
</div>
