@{
  Layout = "~/Views/Shared/_Layout.cshtml";
  ViewData["Title"] = "Pinpad Logistik";
}

<div class="p-4 md:p-6">
  <div class="mb-4 text-sm px-4 sm:px-0">
    <a href="#" class="text-teal-500 font-semibold hover:text-teal-600 transition-colors">Pinpad List</a> /
    <span class="text-gray-500">Inquiry</span>
  </div>

  <div class="flex gap-2 p-5">
    <a href="/Pinpad/Create" id="btnCreate" class="bg-teal-500 text-white px-4 py-2 rounded-md 
           hover:bg-teal-600 transition-colors flex items-center gap-2 
           text-sm font-medium">
      <i class="fa fa-plus"></i>
      <span>Add Pinpad</span>
    </a>

    <a href="/Pinpad/CreateMany" id="btnCreateMany" class="bg-orange-500 text-white px-4 py-2 rounded-md 
           hover:bg-orange-600 transition-colors flex items-center gap-2 
           text-sm font-medium">
      <i class="fa fa-upload"></i>
      <span>Add Multiple Pinpads</span>
    </a>
  </div>


  <!-- Table Controls -->
  <div class="flex flex-col md:flex-row justify-between items-center mb-6">
    <!-- Search field -->
    <div class="flex items-center">
      <label class="text-sm text-gray-700 mr-3">Search:</label>
      <input type="text" id="searchInput" placeholder="Search..."
        class="border border-gray-300 px-4 py-2 rounded focus:ring-2 focus:ring-blue-400 text-sm min-w-[250px]">
    </div>

    <!-- Page Size Selector -->
    <div class="flex items-center mt-2 md:mt-0">
      <label class="text-sm text-gray-700 mr-3">Show:</label>
      <select id="pageSizeSelect"
        class="border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-blue-400 text-sm">
        <option value="10">10</option>
        <option value="25">25</option>
        <option value="50">50</option>
        <option value="100">100</option>
      </select>
      <span class="text-sm text-gray-700 ml-2">entries</span>
    </div>
  </div>

  <!-- Table Container -->
  <div class="bg-white shadow rounded-lg border border-gray-200 overflow-hidden">
    <table class="w-full text-left border-collapse">
      <thead>
        <tr class="bg-gray-100 text-gray-700 text-sm">
          <th class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors" data-sort="branch">
            Branch <span class="sort-icon ml-1">↕</span>
          </th>
          <th class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors"
            data-sort="serialNumber">
            Serial Number <span class="sort-icon ml-1">↕</span>
          </th>
          <th class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors"
            data-sort="registerDate">
            Register Date <span class="sort-icon ml-1">↕</span>
          </th>
          <th class="px-4 py-3 font-semibold cursor-pointer hover:bg-gray-200 transition-colors" data-sort="status">
            Status <span class="sort-icon ml-1">↕</span>
          </th>
          <th class="px-4 py-3 font-semibold">Action</th>
        </tr>
      </thead>
      <tbody id="tableBody" class="text-sm">
        <!-- Data will be populated here -->
      </tbody>
    </table>
  </div>

  <!-- Pagination -->
  <div class="flex flex-col md:flex-row justify-between items-center mt-4">
    <div class="text-sm text-gray-600 mb-2 md:mb-0" id="tableInfo">
      Showing 0 to 0 of 0 entries
    </div>
    <div class="flex space-x-1" id="paginationButtons">
      <button id="prevBtn"
        class="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-100 text-sm transition-colors disabled:opacity-50 disabled:cursor-not-allowed bg-white text-gray-700 font-medium"
        disabled>
        ← Previous
      </button>
      <span id="pageNumbers" class="flex space-x-1"></span>
      <button id="nextBtn"
        class="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-100 text-sm transition-colors disabled:opacity-50 disabled:cursor-not-allowed bg-white text-gray-700 font-medium"
        disabled>
        Next →
      </button>
    </div>
  </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  $(document).ready(function () {
    // Global variables
    let allData = [];
    let filteredData = [];
    let currentPage = 1;
    let pageSize = 10;
    let currentSort = { column: null, direction: 'asc' };
    let searchTerm = '';

    // Initialize
    checkUserAccessLevel();
    loadPinpads();

    // Check user role and show/hide CS-only elements after data is loaded
    $(document).on('dataLoaded', function () {
      checkUserAccessLevel();
    });

    // Event listeners for new buttons
    $('.cs-only').first().on('click', function () {
      // Handle Tambah Pinpad - redirect to add page
      window.location.href = '/Pinpad/Create';
    });

    $('.cs-only').last().on('click', function () {
      // Handle Tambah Banyak Pinpad - redirect to bulk add page or open modal
      window.location.href = '/Pinpad/CreateMany';
    });

    // Event listeners
    $('#searchInput').on('input', function () {
      searchTerm = $(this).val().toLowerCase();
      currentPage = 1; // Reset to first page when searching
      filterAndDisplayData();
    });

    $('#pageSizeSelect').on('change', function () {
      pageSize = parseInt($(this).val());
      currentPage = 1; // Reset to first page when changing page size
      filterAndDisplayData();
    });

    // Column sorting
    $('th[data-sort]').on('click', function () {
      const column = $(this).data('sort');
      if (currentSort.column === column) {
        currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
      } else {
        currentSort.column = column;
        currentSort.direction = 'asc';
      }

      updateSortIcons();
      filterAndDisplayData();
    });

    function updateSortIcons() {
      $('.sort-icon').text('↕');
      if (currentSort.column) {
        const icon = currentSort.direction === 'asc' ? '↑' : '↓';
        $(`th[data-sort="${currentSort.column}"] .sort-icon`).text(icon);
      }
    }

    function loadPinpads() {
      $.ajax({
        url: 'http://localhost:5125/api/pinpads/inquiry',
        type: 'GET',
        dataType: 'json',
        data: { page: 1, size: 1000 },
        success: function (response) {
          allData = response.data || [];
          filteredData = [...allData];
          filterAndDisplayData();
          $(document).trigger('dataLoaded'); // Trigger event when data is loaded
        },
        error: function (xhr, status, error) {
          $('#tableBody').html('<tr><td colspan="5" class="text-center py-4 text-red-500">Error loading data</td></tr>');
        }
      });
    }

    function filterAndDisplayData() {
      // Filter data based on search term
      if (searchTerm) {
        filteredData = allData.filter(item => {
          return (
            (item.branch && item.branch.toLowerCase().includes(searchTerm)) ||
            (item.serialNumber && item.serialNumber.toLowerCase().includes(searchTerm)) ||
            (item.status && item.status.toLowerCase().includes(searchTerm)) ||
            (item.registerDate && item.registerDate.toLowerCase().includes(searchTerm))
          );
        });
      } else {
        filteredData = [...allData];
      }

      // Sort data if column is selected
      if (currentSort.column) {
        sortData();
      }

      // Display data with pagination
      displayPaginatedData();
    }

    function sortData() {
      filteredData.sort((a, b) => {
        let aVal = a[currentSort.column] || '';
        let bVal = b[currentSort.column] || '';

        // Handle date sorting
        if (currentSort.column === 'registerDate') {
          aVal = new Date(aVal || '1900-01-01');
          bVal = new Date(bVal || '1900-01-01');
        } else {
          // String sorting
          aVal = aVal.toString().toLowerCase();
          bVal = bVal.toString().toLowerCase();
        }

        if (aVal < bVal) return currentSort.direction === 'asc' ? -1 : 1;
        if (aVal > bVal) return currentSort.direction === 'asc' ? 1 : -1;
        return 0;
      });
    }

    function displayPaginatedData() {
      const totalItems = filteredData.length;
      const totalPages = Math.ceil(totalItems / pageSize);

      // Ensure current page is valid
      if (totalPages === 0) {
        currentPage = 1;
      } else if (currentPage > totalPages) {
        currentPage = totalPages;
      }

      const startIndex = (currentPage - 1) * pageSize;
      const endIndex = Math.min(startIndex + pageSize, totalItems);
      const pageData = filteredData.slice(startIndex, endIndex);

      // Clear table body
      $('#tableBody').empty();

      if (pageData.length === 0) {
        $('#tableBody').append('<tr><td colspan="5" class="text-center py-4 text-gray-500">No data available</td></tr>');
      } else {
        // Populate table
        pageData.forEach(function (item) {
          const statusClass = getStatusClass(item.status);
          const row = `
                <tr class="border-b hover:bg-gray-50">
                  <td class="px-4 py-3">${item.branch || ''}</td>
                  <td class="px-4 py-3 font-mono">${item.serialNumber || ''}</td>
                  <td class="px-4 py-3">${item.registerDate ? formatDate(item.registerDate) : ''}</td>
                  <td class="px-4 py-3">
                    <span class="inline-block ${statusClass} px-3 py-1 rounded-full text-xs font-medium">
                      ${item.status || ''}
                    </span>
                  </td>
                  <td class="px-4 py-3">
                    <div class="flex gap-2">
                      <a href="/Pinpad/Edit/${item.id}"
                          class="bg-orange-500 text-white w-8 h-8 rounded hover:bg-orange-600 transition-colors flex items-center justify-center">
                            <i class="fa fa-edit"></i>
                        </a>
                      <button onclick="deletePinpad('${item.id}', '${item.serialNumber}')"
                        class="deleteBtn cs-only bg-red-500 text-white w-8 h-8 rounded hover:bg-red-600 transition-colors flex items-center justify-center">
                        <i class="fa fa-times"></i>
                    </button>

                    </div>
                  </td>
                </tr>
              `;
          $('#tableBody').append(row);
        });

      }

      // Update pagination info and controls
      updatePaginationInfo(startIndex, endIndex, totalItems);
      updatePaginationControls(totalPages);
    }

    function checkUserAccessLevel() {
      $.ajax({
        url: 'http://localhost:5125/api/auth/me', // API untuk cek user saat ini
        type: 'GET',
        xhrFields: { withCredentials: true },
        success: function (res) {
          if (res.success) {
            const accessLevel = res.accessLevel; // ini sesuai session yg Anda set di AuthController

            // Kalau Logistics Admin → sembunyiin tombol tertentu
            if (accessLevel == 2) {
              // hide tombol tambah pinpad & tambah banyak
              $("#btnCreate, #btnCreateMany").hide();
              // hide semua tombol delete
              $(".deleteBtn").hide();
            }
          } else {
            // kalau belum login
            window.location.href = "/Auth/Login";
          }
        },
        error: function () {
          window.location.href = "/Auth/Login";
        }
      });
    }


    function updatePaginationInfo(start, end, total) {
      const displayStart = total === 0 ? 0 : start + 1;
      const displayEnd = end;
      $('#tableInfo').text(`Showing ${displayStart} to ${displayEnd} of ${total} entries`);
    }

    function updatePaginationControls(totalPages) {
      // Update prev/next buttons
      $('#prevBtn').prop('disabled', currentPage <= 1);
      $('#nextBtn').prop('disabled', currentPage >= totalPages);

      // Update page numbers
      updatePageNumbers(currentPage, totalPages);
    }

    function updatePageNumbers(current, totalPages) {
      const container = $('#pageNumbers');
      container.empty();

      if (totalPages <= 1) return;

      const maxButtons = 5;
      let startPage = Math.max(1, current - Math.floor(maxButtons / 2));
      let endPage = Math.min(totalPages, startPage + maxButtons - 1);
      startPage = Math.max(1, endPage - maxButtons + 1);

      // Add first page button if needed
      if (startPage > 1) {
        container.append(createPageButton(1, current));
        if (startPage > 2) {
          container.append('<span class="px-2 py-1 text-gray-500">...</span>');
        }
      }

      // Add page number buttons
      for (let i = startPage; i <= endPage; i++) {
        container.append(createPageButton(i, current));
      }

      // Add last page button if needed
      if (endPage < totalPages) {
        if (endPage < totalPages - 1) {
          container.append('<span class="px-2 py-1 text-gray-500">...</span>');
        }
        container.append(createPageButton(totalPages, current));
      }
    }

    function createPageButton(pageNum, currentPageParam) {
      const btn = $('<button>')
        .addClass('px-3 py-1 border rounded text-sm transition-colors')
        .text(pageNum)
        .toggleClass('bg-blue-500 text-white border-blue-500', pageNum === currentPageParam)
        .toggleClass('hover:bg-gray-100', pageNum !== currentPageParam)
        .on('click', function () {
          if (pageNum !== currentPage) {
            currentPage = pageNum;
            displayPaginatedData();
          }
        });
      return btn;
    }

    // Simple pagination button handlers
    $('#prevBtn').on('click', function () {
      if (currentPage > 1) {
        currentPage--;
        displayPaginatedData();
      }
    });

    $('#nextBtn').on('click', function () {
      const totalPages = Math.ceil(filteredData.length / pageSize);
      if (currentPage < totalPages) {
        currentPage++;
        displayPaginatedData();
      }
    });

    // Force enable buttons if they get stuck disabled
    function forceEnableButtons() {
      const totalPages = Math.ceil(filteredData.length / pageSize);
      if (totalPages > 1) {
        $('#prevBtn').prop('disabled', false);
        $('#nextBtn').prop('disabled', false);
      }
    }

    // Call this function periodically to ensure buttons don't get stuck
    setInterval(forceEnableButtons, 2000);

    // Also enable buttons when data changes
    $(document).on('dataLoaded', function () {
      setTimeout(forceEnableButtons, 100);
    });

    function formatDate(dateStr) {
      if (!dateStr) return '';
      try {
        const date = new Date(dateStr);
        if (isNaN(date.getTime())) return dateStr;

        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const seconds = String(date.getSeconds()).padStart(2, '0');
        return `${day}-${month}-${year} ${hours}:${minutes}:${seconds}`;
      } catch (e) {
        return dateStr;
      }
    }

    function getStatusClass(status) {
      if (!status) return 'bg-gray-100 text-gray-800';

      switch (status.toLowerCase()) {
        case 'ready':
          return 'bg-green-100 text-green-800';
        case 'notready':
          return 'bg-yellow-100 text-yellow-800';
        case 'active':
          return 'bg-blue-100 text-blue-800';
        case 'inactive':
          return 'bg-gray-200 text-gray-800';
        default:
          return 'bg-gray-100 text-gray-800';
      }
    }

    window.deletePinpad = function (id, serialNumber) {
      Swal.fire({
        title: 'Confirmation',
        text: `Are you sure you want to delete the Pinpad with SN: ${serialNumber}?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, Delete',
        cancelButtonText: 'Cancel'
      }).then((result) => {
        if (!result.isConfirmed) return;

        $.ajax({
          url: `http://localhost:5125/api/pinpads/${id}`,
          type: 'DELETE',
          success: function (response) {
            Swal.fire({
              icon: 'success',
              title: 'Success',
              text: response.message || `Pinpad ${serialNumber} has been successfully removed`,
              timer: 2000,
              showConfirmButton: false
            });

            // Hapus data dari list tanpa reload full page
            allData = allData.filter(item => String(item.id) !== String(id));
            filterAndDisplayData();
            applyRoleVisibility(); // biar tombol2 cs-only tetap konsisten
          },
          error: function (xhr) {
            const res = xhr.responseJSON;
            Swal.fire({
              icon: 'error',
              title: 'Failed',
              text: res?.message || 'An error occurred while deleting the data'
            });
          }
        });
      });
    };
  });
</script>